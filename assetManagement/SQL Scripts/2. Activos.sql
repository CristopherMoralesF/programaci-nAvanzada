USE ASSET_MANAGEMENT
GO

DROP VIEW IF EXISTS RESUMEN_ACTIVOS_CLASE
GO

----------------- Función para resumir la cantidad de activos por clase. 
--- Esta función es utilizada para el barchar de la pantalla principal. 
CREATE OR ALTER VIEW RESUMEN_ACTIVOS_CLASE
AS
	SELECT
		C.ID_CLASE,
		C.DESCRIPCION_CLASE,
		COUNT(A.ID_ACTIVO) AS TOTAL_ACTIVOS
	FROM ACTIVO A
	INNER JOIN CLASE C ON C.ID_CLASE = A.ID_CLASE
	GROUP BY C.ID_CLASE, C.DESCRIPCION_CLASE
GO

SELECT * FROM RESUMEN_ACTIVOS_CLASE
GO

----------------- Función para generar KPIs sobre los activos 
--- Esta función es utilizada en los cards de la pantalla principal
DROP PROCEDURE IF EXISTS ESTATUS_ACTIVOS
GO

CREATE PROCEDURE ESTATUS_ACTIVOS
	@IN_ID_USUARIO	INT
AS
	SELECT
		COUNT(ID_ACTIVO) AS TOTAL_ACTIVOS,
		SUM(VALOR_ADQUISICION) AS TOTAL_INVERSION,
		AVG(PORCENTAJE_CUMPLIMIENTO) AS PORCENTAJE_CUMPLIMIENTO,
		SUM(TOTAL_ACTIVOS_USUARIO) AS TOTAL_ACTIVOS_USUARIO
	FROM (
		SELECT
			*,
			((SELECT COUNT(V.ID_ACTIVO) FROM VALIDACION V WHERE V.ID_ACTIVO = A.ID_ACTIVO) / (SELECT COUNT(TV.DESCRIPCION_VALIDACION) FROM TIPO_VALIDACION TV WHERE TV.ID_CLASE = A.ID_CLASE)*100) AS PORCENTAJE_CUMPLIMIENTO,
			CASE
				WHEN A.ID_DUENNO = @IN_ID_USUARIO THEN 
					1
				ELSE
					0
			END AS TOTAL_ACTIVOS_USUARIO
		FROM ACTIVO A
	) RESUMEN_ACTIVOS
GO

EXEC ESTATUS_ACTIVOS 2
GO

----------------- Crea view para resumir la información completa de los activos
--- Este resumen se utiliza en la panta principal de activos, y es el resumen de todos los activos 
--- disponibles en la compañía. 
DROP VIEW IF EXISTS RESUMEN_ACTIVOS
GO

CREATE VIEW RESUMEN_ACTIVOS
AS
	SELECT
		A.ID_ACTIVO, 
		A.DESCRIPCION_ACTIVO,
		A.VALOR_ADQUISICION,
		A.FECHA_ADQUISICION, 
		C.DESCRIPCION_CLASE,
		C.VIDA_UTIL,
		A.PERIODOS_DEPRECIADOS,
		U.ID_EDIFICIO,
		U.DESCRIPCION_SECCION,
		US.NOMBRE,
		E.DESCRIPCION_ESTADO
	FROM ACTIVO A
	INNER JOIN CLASE C ON C.ID_CLASE = A.ID_CLASE
	INNER JOIN UBICACION U ON U.ID_UBICACION = A.ID_UBICACION
	INNER JOIN USUARIO US ON US.ID_USUARIO = A.ID_DUENNO
	INNER JOIN ESTADO E ON E.ID_ESTADO = A.ID_ESTADO
GO

SELECT * FROM RESUMEN_ACTIVOS
GO

----------------- Trigger que crea el asiento después de que sea crea un activo nuevo
--- Este se utiliza cada vez que se hace un insert en la tabla de activos. 
CREATE OR ALTER TRIGGER TRG_CREAR_ACTIVO ON ACTIVO
AFTER INSERT
AS
	DECLARE
		@VAR_CUENTA_DEBITO	VARCHAR(15), 
		@VAR_CUENTA_CREDITO	VARCHAR(15),
		@VAR_JE_DESCRIPTION	VARCHAR(255),
		@VAR_NEW_JE_ID		INT
BEGIN 

	--- Buscar las cuentas que se van a impactar. 
	SELECT @VAR_CUENTA_DEBITO = ID_CUENTA FROM CLASE_CUENTA CC WHERE CC.ID_CLASE = (SELECT ID_CLASE FROM INSERTED) AND ID_CATEGORIA_CUENTA = 1; 
	SET @VAR_CUENTA_CREDITO = '1-1-1-101392'; 
	SET @VAR_JE_DESCRIPTION = CONCAT('Reconocimiento del activo ',(SELECT CAST(ID_CLASE AS VARCHAR(20)) FROM INSERTED),' - ',(SELECT DESCRIPCION_ACTIVO FROM INSERTED)); 

	PRINT @VAR_CUENTA_DEBITO
	PRINT @VAR_CUENTA_CREDITO
	PRINT @VAR_JE_DESCRIPTION

	--- Crear el header del asiento
	INSERT INTO ASIENTO(ID_CLASE,FECHA,DESCRIPCION) VALUES (
		(SELECT ID_CLASE FROM INSERTED),
		GETDATE(), 
		@VAR_JE_DESCRIPTION
	);

	SELECT @VAR_NEW_JE_ID = SCOPE_IDENTITY();

	-- Crear el body del asiento
	INSERT INTO ASIENTO_LINEA (ID_ASIENTO, ID_CUENTA_CONTABLE,DESCRIPCION_LINEA,DEBITO,CREDITO) VALUES (@VAR_NEW_JE_ID,@VAR_CUENTA_DEBITO,@VAR_JE_DESCRIPTION,(SELECT VALOR_ADQUISICION FROM INSERTED),0);
    INSERT INTO ASIENTO_LINEA (ID_ASIENTO, ID_CUENTA_CONTABLE,DESCRIPCION_LINEA,DEBITO,CREDITO) VALUES (@VAR_NEW_JE_ID,@VAR_CUENTA_CREDITO,@VAR_JE_DESCRIPTION,0,(SELECT VALOR_ADQUISICION FROM INSERTED));

	--- Actualizar los balances de las cuentas
    --- Cuenta al debito
    UPDATE CUENTA_CONTABLE SET TOTAL_DEBITOS = TOTAL_DEBITOS + (SELECT VALOR_ADQUISICION FROM INSERTED) WHERE ID_CUENTA = @VAR_CUENTA_DEBITO;
    UPDATE CUENTA_CONTABLE SET BALANCE = TOTAL_DEBITOS - TOTAL_CREDITOS  WHERE ID_CUENTA = @VAR_CUENTA_DEBITO;   
    
    --- Cuenta al credito
    UPDATE CUENTA_CONTABLE SET TOTAL_CREDITOS = TOTAL_CREDITOS + (SELECT VALOR_ADQUISICION FROM INSERTED) WHERE ID_CUENTA = @VAR_CUENTA_CREDITO;
    UPDATE CUENTA_CONTABLE SET BALANCE = TOTAL_DEBITOS - TOTAL_CREDITOS  WHERE ID_CUENTA = @VAR_CUENTA_CREDITO;   

END
GO

SELECT * FROM ACTIVO;

INSERT INTO ACTIVO (ID_CLASE,ID_UBICACION,ID_DUENNO,ID_ESTADO,DESCRIPCION_ACTIVO,VALOR_ADQUISICION,FECHA_ADQUISICION) VALUES
	(1,1,2,5,'Vehiculo de Carga Pesada',22500000,'2021-11-26')

SELECT * FROM ASIENTO;

SELECT * FROM ASIENTO_LINEA WHERE ID_CUENTA_CONTABLE = '1-2-2-167401'; 

SELECT * FROM CUENTA_CONTABLE WHERE ID_CUENTA = '1-2-2-167401'